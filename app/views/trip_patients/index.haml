- content_for :title do
  = "#{@trip} - Patients"
- content_for :subnavigation do
  %ul
    - if permitted_to? :create, PatientCase.new(:trip => @trip)
      %li= link_to "Add case", new_trip_case_path(@trip)
    %li= link_to "Schedule", trip_schedule_path(@trip)
.record_list.patient_list
  .filter
    .record_jump= select_tag :patient_anchor, options_for_select([["Jump to patient...",""]] + @trip.patients.map{ |patient| [patient, dom_id(patient)] })
    .body_part
      - @body_part_names.each do |body_part_name|
        .item
          = check_box_tag "#{body_part_name}_filter", body_part_name
          = label_tag "#{body_part_name}_filter", body_part_name


  .records
    - @trip.patients. each do |patient|
      %a{ :name => dom_id(patient) }
      .patient{ :id => "#{patient.id}" }
        .basic
          %h2= patient
          .image= patient_image(patient, :small)
          = render :partial => "patients/shared/patient_demographic", :locals => { :patient => patient }
          - if patient.has_medical_detail?
            .medical_details.supplemental
              %p.fake_link.toggle= "Full medical detail"
              .details{ :style => "display: none;" }
                = render :partial => "patients/medical_details", :locals => { :patient => patient, :hide => true }
        .cases.treatment
          -# case groups represent authorized cases ready for scheduling
          -# unauthorized cases should be separate from case groups
          - case_groups = patient.case_groups(:conditions => ["trip_id = ?", @trip.id])
          - unauthorized_cases = patient.patient_cases.unauthorized(:conditions => ["trip_id = ?", @trip.id])
          - if case_groups.present?
            .case_list.authorized
              - form_tag(group_trip_cases_path, {:method => :post}) do
                .header
                  %h3 Cases
                  .nav
                    = select_tag :bulk_action, options_for_select([[""],["Group","group"],["Return to waiting","unapprove"]])
                    = submit_tag "Go"
                    = check_box_tag :no_patient_cases, true, params[:no_patient_cases]

                - case_groups.each do |case_group|
                  .case_group{ :id => dom_id(case_group) }
                    - case_group.patient_cases.each do |patient_case|
                      .patient_case{ :class => "#{patient_case.treated? ? "treated" : "untreated"}" }
                        .xrays
                          - if patient_case.xrays.present?
                            = xray_preview(patient_case.display_xray, :size => :tiny)
                            - if patient_case.xrays.size > 1
                              = link_to "More X-rays", case_xrays_path(patient_case)
                            - else
                              - if permitted_to? :create, Xray.new(:patient_case => patient_case)
                                = link_to "Add X-Ray", new_case_xray_path(patient_case)
                        %p.body_part
                          = link_to patient_case.body_part, trip_case_path(@trip,patient_case)
                          - if patient_case.revision?
                            %span.asterisk (Revision)
                        %p.diagnosis
                          = patient_case.diagnosis.try(:disease)
                          - if patient_case.severity && patient_case.severity > 0
                            %span.severity{ :class => severity(patient_case).downcase }
                              = "(#{severity(patient_case)})"
                        .nav
                          = check_box_tag "bulk_cases[]", patient_case.id

          - if unauthorized_cases.present?
            .case_list.unauthorized
              %h3 Waiting Cases
              .grouped_case_nav
              - unauthorized_cases.each do |patient_case|
                .patient_case
                  .xrays
                    - if patient_case.xrays.present?
                      = xray_preview(patient_case.display_xray, :size => :tiny)
                      - if patient_case.xrays.size > 1
                        = link_to "More X-rays", case_xrays_path(patient_case)
                    - else
                      - if permitted_to? :create, Xray.new(:patient_case => patient_case)
                        = link_to "Add X-Ray", new_case_xray_path(patient_case)

                  %p.body_part
                    = link_to patient_case.body_part, trip_case_path(@trip,patient_case)
                    - if patient_case.revision?
                      %span.asterisk (Revision)
                  %p.diagnosis
                    = patient_case.diagnosis.try(:disease)
                    - if patient_case.severity && patient_case.severity > 0
                      %span.severity{ :class => severity(patient_case).downcase }
                        = "(#{severity(patient_case)})"
                  .nav
                    - if permitted_to? :authorize, patient_case
                      - if !patient_case.authorized?
                        = link_to "Approve", authorize_trip_case_path(@trip, patient_case), :method => :put
                      - else
                        = link_to "Return to waiting", deauthorize_trip_case_path(@trip, patient_case), :method => :put
                    |
                    - if permitted_to? :edit, patient_case
                      = link_to "Make Changes", trip_case_path(@trip,patient_case)

- content_for :script do
  :javascript
    $('.filter .body_part .item input').change(function(event) {
      var selected = $('.filter .body_part input:checked').map(function() { return this.value });
      if (selected.length > 0) {
        var re = new RegExp(selected.toArray().join("|"),"i");
        var shown_cases = $(".patient_case p.body_part").filter(function() { return re.test( $(this).text() ) });
        $(".records .patient").addClass("hide");
        $(".records .patient .patient_case").addClass("hide");
        shown_cases.each(function(the_case) {
          $(this).closest(".patient_case").removeClass("hide");
          $(this).closest(".patient").removeClass("hide");
        });
      } else {
        $(".records .patient").removeClass("hide");
        $(".records .patient .patient_case").removeClass("hide");
      }
    });


    function resetAllPatients() {

    }